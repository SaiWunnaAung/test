name: A workflow for my Hello World App
on:
  push:
    branches:
      - master
jobs:
  UnitTests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Unit Tests
        run: mvn -Dtest=com.napier.sem.UnitTest test
      - name: CodeCov
        uses: codecov/codecov-action@v2
        with:
          # token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          directory: ./target/site/jacoco
          flags: Unit Tests # optional
          verbose: true # optional (default = false)

  IntegrationTests:
    name: Integration Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Integration Tests and CodeCov
        run: |
          docker build -t database ./db 
          docker run --name world -dp 33060:3306 database
          mvn -Dtest=com.napier.sem.AppIntegrationTest test          
          docker stop world
          docker rm world
          docker image rm database
      - name: CodeCov
        uses: codecov/codecov-action@v2
        with:
          # token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          directory: ./target/site/jacoco
          flags: Integration Tests # optional
          verbose: true # optional (default = false)
  build:
    name: Build Run in Docker and Deploy Release
    needs:
      - UnitTests
      - IntegrationTests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Package and Run docker compose
        run: |
          mvn package -DskipTests
          docker-compose -f "docker-compose.yml" up -d --build
      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Push Image to azure
        run: |
          docker-compose push
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          automatic_release_tag: "latest"
          files: |
            ./target/*.jar
#  build-and-deploy:
#    runs-on: ubuntu-20.04
#    needs: build
#    steps:
#      # checkout the repo
#      - name: 'Checkout GitHub Action'
#        uses: actions/checkout@main
#
#      - name: 'Build and push image'
#        uses: azure/docker-login@v1
#        with:
#          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
#          username: ${{ secrets.REGISTRY_USERNAME }}
#          password: ${{ secrets.REGISTRY_PASSWORD }}
#      - run: |
##          docker compose push
#          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/app:${{ github.sha }}
#          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/ap:${{ github.sha }}
#
#      - name: 'Deploy to Azure Container Instances'
#        uses: 'azure/aci-deploy@v1'
#        with:
#          resource-group: ${{ secrets.RESOURCE_GROUP }}
#          dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
#          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}
#          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
#          registry-username: ${{ secrets.REGISTRY_USERNAME }}
#          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
#          name: 40501792test
#          location: 'Central US'